// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/sjenning/api/config/v1"
	scheme "github.com/sjenning/client-go/config/clientset/versioned/scheme"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FeaturesGetter has a method to return a FeatureInterface.
// A group's client should implement this interface.
type FeaturesGetter interface {
	Features() FeatureInterface
}

// FeatureInterface has methods to work with Feature resources.
type FeatureInterface interface {
	Create(*v1.Feature) (*v1.Feature, error)
	Update(*v1.Feature) (*v1.Feature, error)
	UpdateStatus(*v1.Feature) (*v1.Feature, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.Feature, error)
	List(opts meta_v1.ListOptions) (*v1.FeatureList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Feature, err error)
	FeatureExpansion
}

// features implements FeatureInterface
type features struct {
	client rest.Interface
}

// newFeatures returns a Features
func newFeatures(c *ConfigV1Client) *features {
	return &features{
		client: c.RESTClient(),
	}
}

// Get takes name of the feature, and returns the corresponding feature object, and an error if there is any.
func (c *features) Get(name string, options meta_v1.GetOptions) (result *v1.Feature, err error) {
	result = &v1.Feature{}
	err = c.client.Get().
		Resource("features").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Features that match those selectors.
func (c *features) List(opts meta_v1.ListOptions) (result *v1.FeatureList, err error) {
	result = &v1.FeatureList{}
	err = c.client.Get().
		Resource("features").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested features.
func (c *features) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("features").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a feature and creates it.  Returns the server's representation of the feature, and an error, if there is any.
func (c *features) Create(feature *v1.Feature) (result *v1.Feature, err error) {
	result = &v1.Feature{}
	err = c.client.Post().
		Resource("features").
		Body(feature).
		Do().
		Into(result)
	return
}

// Update takes the representation of a feature and updates it. Returns the server's representation of the feature, and an error, if there is any.
func (c *features) Update(feature *v1.Feature) (result *v1.Feature, err error) {
	result = &v1.Feature{}
	err = c.client.Put().
		Resource("features").
		Name(feature.Name).
		Body(feature).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *features) UpdateStatus(feature *v1.Feature) (result *v1.Feature, err error) {
	result = &v1.Feature{}
	err = c.client.Put().
		Resource("features").
		Name(feature.Name).
		SubResource("status").
		Body(feature).
		Do().
		Into(result)
	return
}

// Delete takes name of the feature and deletes it. Returns an error if one occurs.
func (c *features) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("features").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *features) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Resource("features").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched feature.
func (c *features) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Feature, err error) {
	result = &v1.Feature{}
	err = c.client.Patch(pt).
		Resource("features").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
